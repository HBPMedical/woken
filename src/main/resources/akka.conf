# Merged with defaults in woken-messages/reference.conf
akka {
  loglevel = "WARNING"
  loglevel = ${?LOG_LEVEL}
  stdout-loglevel = "WARNING"
  stdout-loglevel = ${?LOG_LEVEL}
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  log-config-on-start = off
  log-config-on-start = ${?LOG_CONFIG}

  log-dead-letters = 10
  log-dead-letters-during-shutdown = off

  coordinated-shutdown.terminate-actor-system = on

  actor {
    # provider = "cluster"

    debug {
      receive = on
      autoreceive = off
      lifecycle = on
      fsm = off
      unhandled = on
      event-stream = off
    }

    allow-java-serialization = off
    enable-additional-serialization-bindings = true

  }

  remote {
    log-sent-messages = off
    log-received-messages = off
    log-remote-lifecycle-events = off

    watch-failure-detector {
      acceptable-heartbeat-pause = 20 s
    }

  }

  cluster {
    seed-nodes = [
      ${remoting.protocol}"://"${clustering.cluster.name}"@"${clustering.seed-ip}":"${clustering.seed-port}
    ]

    shutdown-after-unsuccessful-join-seed-nodes = 20s

    roles = ["woken"]

    role {
      woken.min-nr-of-members = 1
      validation.min-nr-of-members = 0
      validation.min-nr-of-members = ${?VALIDATION_MIN_SERVERS}
      scoring.min-nr-of-members = 0
      validation.min-nr-of-members = ${?SCORING_MIN_SERVERS}
    }

    client {
      initial-contacts = [${remoting.protocol}"://"${clustering.cluster.name}"@"${clustering.seed-ip}":"${clustering.seed-port}"/system/receptionist"]

      receptionist {
        response-tunnel-receive-timeout = 60s
      }
    }
  }

  http {
    server {
      idle-timeout = 300s
      request-timeout = 180s
      ssl-encryption = off
      ssl-tracing = on
    }

    client {
      idle-timeout = 300s
      request-timeout = 20 s
    }

    host-connection-pool {
      max-connections = 128
      max-open-requests = 128
    }
  }
}

poolResizer {

  miningQueries {
    enabled = on
    lower-bound = 1
    # The most number of routees the router should ever have.
    # Must be greater than or equal to lower-bound.
    upper-bound = 50
    upper-bound = ${?MINING_LIMIT}
    action-interval = 5s
    downsize-after-underutilized-for = 72h
  }

  experimentQueries {
    enabled = on
    lower-bound = 1
    # The most number of routees the router should ever have.
    # Must be greater than or equal to lower-bound.
    upper-bound = 50
    upper-bound = ${?EXPERIMENT_LIMIT}
    action-interval = 5s
    downsize-after-underutilized-for = 72h
  }

  metadataQueries {
    enabled = on
    lower-bound = 1
    # The most number of routees the router should ever have.
    # Must be greater than or equal to lower-bound.
    upper-bound = 50
    upper-bound = ${?METADATA_LIMIT}
    action-interval = 5s
    downsize-after-underutilized-for = 72h
  }

}
