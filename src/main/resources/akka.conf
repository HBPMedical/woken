# Merged with defaults in woken-messages/reference.conf
akka {
  loglevel = WARNING
  loglevel = ${?LOG_LEVEL}
  stdout-loglevel = WARNING
  stdout-loglevel = ${?LOG_LEVEL}

  log-config-on-start = off
  log-config-on-start = ${?LOG_CONFIG}

  log-dead-letters = 10
  log-dead-letters-during-shutdown = off

  actor {
    # provider = "cluster"

    # Actors created by Akka automatically
    deployment {

      /entrypoint/mainRouter/validationWorker {
        router = random-group
        routees.paths = ["/user/validation"]
        cluster {
          enabled = on
          allow-local-routees = off
          use-roles = ["validation"]
        }
      }

      /entrypoint/mainRouter/scoringWorker {
        router = random-group
        routees.paths = ["/user/scoring"]
        cluster {
          enabled = on
          allow-local-routees = off
          use-roles = ["scoring"]
        }
      }

    }
  }

  remote {
    log-sent-messages = off
    log-received-messages = off
    log-remote-lifecycle-events = off

    watch-failure-detector {
      acceptable-heartbeat-pause = 20 s
    }

    netty.tcp {
      hostname = ${clustering.ip} # external (logical) hostname
      port = ${clustering.port}   # external (logical) port

      bind-hostname = 0.0.0.0         # internal (bind) hostname
      bind-port = ${clustering.port}  # internal (bind) port
    }

    //    artery {
    //      enabled = off
    //      canonical.hostname = ${clustering.ip} # external (logical) hostname
    //      canonical.port = ${clustering.port}   # external (logical) port
    //
    //      bind.hostname = 0.0.0.0         # internal (bind) hostname
    //      bind.port = ${clustering.port}  # internal (bind) port
    //
    //      advanced.aeron-dir = "/dev/shm/woken"
    //    }
  }

  cluster {
    seed-nodes = [
      "akka.tcp://"${clustering.cluster.name}"@"${clustering.seed-ip}":"${clustering.seed-port}
    ]

    roles = ["woken"]

    role {
      woken.min-nr-of-members = 1
      validation.min-nr-of-members = 0
      validation.min-nr-of-members = ${?VALIDATION_MIN_SERVERS}
      scoring.min-nr-of-members = 0
      validation.min-nr-of-members = ${?SCORING_MIN_SERVERS}
    }

    client {
      initial-contacts = ["akka.tcp://"${clustering.cluster.name}"@"${clustering.seed-ip}":"${clustering.seed-port}"/system/receptionist"]

      receptionist {
        response-tunnel-receive-timeout = 60s
      }
    }
  }

  http {
    server {
      idle-timeout = 300s
      request-timeout = 180s
      ssl-encryption = off
      ssl-tracing = on
    }

    client {
      idle-timeout = 300s
      request-timeout = 20 s
    }

    host-connection-pool {
      max-connections = 128
    }
  }
}

poolResizer {

  miningQueries {
    enabled = on
    lower-bound = 1
    # The most number of routees the router should ever have.
    # Must be greater than or equal to lower-bound.
    upper-bound = 10
    upper-bound = ${?MINING_LIMIT}
    action-interval = 5s
    downsize-after-underutilized-for = 72h
  }

  experimentQueries {
    enabled = on
    lower-bound = 1
    # The most number of routees the router should ever have.
    # Must be greater than or equal to lower-bound.
    upper-bound = 10
    upper-bound = ${?EXPERIMENT_LIMIT}
    action-interval = 5s
    downsize-after-underutilized-for = 72h
  }

}
