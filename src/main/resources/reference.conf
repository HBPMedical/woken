akka {
  loglevel = WARNING
  stdout-loglevel = WARNING
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  log-dead-letters = 10

  actor {
    # provider = "cluster"

    debug {
      receive = on
      autoreceive = off
      lifecycle = on
      fsm = on
      unhandled = on
      event-stream = off
    }

    serializers {
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
      query-result-serializer = "eu.hbp.mip.woken.messages.query.QueryResultSerializer"
    }

    # configuration of the serialization library
    kryo {
      post-serialization-transformations = "off"
      idstrategy = "default"
      kryo-trace = false
      implicit-registration-logging = false
    }

    serialization-bindings {
      "eu.hbp.mip.woken.messages.validation.ScoringQuery" = kryo
      "eu.hbp.mip.woken.messages.validation.ScoringResult" = kryo
      "eu.hbp.mip.woken.messages.validation.ValidationQuery" = kryo
      "eu.hbp.mip.woken.messages.validation.ValidationResult" = kryo
      "eu.hbp.mip.woken.messages.query.Query" = kryo
      "eu.hbp.mip.woken.messages.query.QueryResult" = query-result-serializer
      "akka.actor.ActorSelectionMessage" = akka-containers
      "akka.remote.DaemonMsgCreate" = daemon-create
      "akka.remote.artery.ArteryMessage" = artery
      "akka.protobuf.GeneratedMessage" = proto
      "com.google.protobuf.GeneratedMessage" = proto
      "java.util.Optional" = akka-misc
    }
    enable-additional-serialization-bindings = on
    allow-java-serialization = on
    warn-about-java-serializer-usage = on

    # Actors created by Akka automatically
    deployment {

      /entrypoint/mainRouter/validationWorker {
        router = random-group
        routees.paths = ["/user/validation"]
        cluster {
          enabled = on
          allow-local-routees = off
          use-roles = ["validation"]
        }
      }

      /entrypoint/mainRouter/scoringWorker {
        router = random-group
        routees.paths = ["/user/scoring"]
        cluster {
          enabled = on
          allow-local-routees = off
          use-roles = ["scoring"]
        }
      }

    }
  }

  extensions += "com.romix.akka.serialization.kryo.KryoSerializationExtension$"

}

akka.http {
  server {
    idle-timeout = 300s
    request-timeout = 180s
    ssl-encryption = off
    ssl-tracing = on
  }

  client {
    idle-timeout = 300s
    request-timeout = 20 s
  }
}

clustering {
  ip = "127.0.0.1"
  ip = ${?CLUSTER_IP}
  port = 8088
  port = ${?CLUSTER_PORT}
  seed-ip = "127.0.0.1"
  seed-ip = ${?CLUSTER_IP}
  seed-ip = ${?WOKEN_PORT_8088_TCP_ADDR}
  seed-port = 8088
  seed-port = ${?WOKEN_PORT_8088_TCP_PORT}
  cluster.name = "woken"
  cluster.name = ${?CLUSTER_NAME}
}

# The actual Algorithm Library
algorithms {
  histograms {
    dockerImage = "hbpmip/python-histograms:0.3.6"
    predictive = false
    supportsNullValues = true
  }
  statisticsSummary {
    dockerImage = "hbpmip/r-summary-stats:2afe249"
    predictive = false
    supportsNullValues = true
  }
  anova {
    dockerImage = "hbpmip/python-anova:0.3.5"
    predictive = false
    supportsNullValues = false
  }
  linearRegression {
    dockerImage = "hbpmip/python-linear-regression:0.0.6"
    predictive = false
    supportsNullValues = false
  }
  knn {
    dockerImage = "hbpmip/java-rapidminer-knn:0.2.1"
    predictive = true
    supportsNullValues = false
  }
  naiveBayes {
    dockerImage = "hbpmip/java-rapidminer-naivebayes:0.2.0"
    predictive = true
    supportsNullValues = false
  }
  tSNE {
    image = "hbpmip/python-tsne:0.3.3"
    predictive = false
    supportsNullValues = false
    maturity = "experimental"
  }
  ggparci {
    dockerImage = "hbpmip/r-ggparci:0.2.0"
    predictive = false
    supportsNullValues = false
    maturity = "experimental"
  }
  # Only for testing
  chaos {
    dockerImage = "hbpmip/chaos-algorithm:0.1.1"
    predictive = true
    supportsNullValues = true
  }
}
