{
  "algorithms": [
    {
      "code": "histograms",
      "constraints": {
        "covariables": {
          "max_count": null,
          "min_count": 0
        },
        "groupings": {
          "max_count": null,
          "min_count": 0
        },
        "mixed": true,
        "variable": {
          "binominal": false,
          "integer": true,
          "polynominal": false,
          "real": true
        }
      },
      "description": "Histograms...",
      "docker_image": "hbpmip/python-histograms:0.5.0",
      "environment": "Python",
      "label": "Histograms",
      "type": [
        "statistics"
      ]
    },
    {
      "code": "statisticsSummary",
      "constraints": {
        "variable": {
          "binominal": true,
          "integer": true,
          "polynominal": true,
          "real": true
        }
      },
      "description": "Statistics Summary...",
      "docker_image": "hbpmip/python-summary-statistics:0.3.2",
      "environment": "python",
      "label": "Statistics Summary",
      "type": [
        "statistics"
      ]
    },
    {
      "code": "linearRegression",
      "constraints": {
        "covariables": {
          "max_count": null,
          "min_count": 1
        },
        "groupings": {
          "max_count": 1,
          "min_count": 0
        },
        "mixed": true,
        "variable": {
          "binominal": false,
          "integer": true,
          "polynominal": false,
          "real": true
        }
      },
      "description": "Standard Linear Regression...",
      "docker_image": "hbpmip/python-linear-regression:0.2.0",
      "environment": "Python",
      "label": "Linear Regression",
      "parameters": [],
      "type": [
        "statistics"
      ]
    },
    {
      "code": "sgdLinearModel",
      "constraints": {
        "covariables": {
          "max_count": null,
          "min_count": 1
        },
        "groupings": {
          "max_count": 0,
          "min_count": 0
        },
        "mixed": true,
        "variable": {
          "binominal": true,
          "integer": true,
          "polynominal": true,
          "real": true
        }
      },
      "description": "Linear model using Stochastic Gradient Descent...",
      "docker_image": "hbpmip/python-sgd-linear-model:0.1.6",
      "environment": "Python",
      "label": "SGD Linear model",
      "parameters": [],
      "type": [
        "predictive_model"
      ]
    },
    {
      "code": "naiveBayes",
      "constraints": {
        "covariables": {
          "max_count": null,
          "min_count": 1
        },
        "groupings": {
          "max_count": 0,
          "min_count": 0
        },
        "mixed": true,
        "variable": {
          "binominal": true,
          "integer": true,
          "polynominal": true,
          "real": true
        }
      },
      "description": "Naive Bayes using Stochastic Gradient Descent",
      "docker_image": "hbpmip/python-sgd-naive-bayes:0.1.6",
      "environment": "Python",
      "label": "Naive Bayes",
      "parameters": [
        {
          "code": "alpha",
          "constraints": {
            "max": 1.0,
            "min": 0.0
          },
          "default_value": 1.0,
          "description": "Additive (Laplace/Lidstone) smoothing parameter (0 for no smoothing, default to 1.)",
          "label": "alpha",
          "type": "number"
        }
      ],
      "type": [
        "predictive_model"
      ]
    },
    {
      "code": "sgdNeuralNetwork",
      "constraints": {
        "covariables": {
          "max_count": null,
          "min_count": 1
        },
        "groupings": {
          "max_count": 0,
          "min_count": 0
        },
        "mixed": true,
        "variable": {
          "binominal": true,
          "integer": true,
          "polynominal": true,
          "real": true
        }
      },
      "description": "Neural Network using Stochastic Gradient Descent...",
      "docker_image": "hbpmip/python-sgd-neural-network:0.1.6",
      "environment": "Python",
      "label": "SGD Neural Network",
      "parameters": [],
      "type": [
        "predictive_model"
      ]
    },
    {
      "code": "gradientBoosting",
      "constraints": {
        "covariables": {
          "max_count": null,
          "min_count": 1
        },
        "groupings": {
          "max_count": 0,
          "min_count": 0
        },
        "mixed": true,
        "variable": {
          "binominal": true,
          "integer": true,
          "polynominal": true,
          "real": true
        }
      },
      "description": "Gradient Boosting...",
      "docker_image": "hbpmip/python-gradient-boosting:0.1.6",
      "environment": "Python",
      "label": "Gradient Boosting",
      "parameters": [],
      "type": [
        "predictive_model"
      ]
    },
    {
      "code": "anova",
      "constraints": {
        "covariables": {
          "max_count": null,
          "min_count": 1
        },
        "groupings": {
          "max_count": null,
          "min_count": 1
        },
        "mixed": true,
        "variable": {
          "binominal": false,
          "integer": true,
          "polynominal": false,
          "real": true
        }
      },
      "description": "ANOVA...",
      "docker_image": "hbpmip/python-anova:0.4.1",
      "environment": "Python",
      "label": "Anova",
      "parameters": [
        {
          "code": "design",
          "default_value": "factorial",
          "description": "The type of multi-factors design. Choose 'factorial' to enable interactions analysis or 'additive' for a model without no interaction at all.",
          "label": "design",
          "type": "enumeration",
          "values": [
            "factorial",
            "additive"
          ]
        }
      ],
      "type": [
        "statistics"
      ]
    },
    {
      "code": "knn",
      "constraints": {
        "covariables": {
          "max_count": null,
          "min_count": "1"
        },
        "groupings": {
          "max_count": 0,
          "min_count": 0
        },
        "mixed": false,
        "variable": {
          "binominal": true,
          "integer": true,
          "polynominal": true,
          "real": true
        }
      },
      "description": "K-nearest neighbors...",
      "docker_image": "hbpmip/python-knn:0.3.0",
      "environment": "Python",
      "label": "K-nearest neighbors",
      "parameters": [
        {
          "code": "k",
          "constraints": {
            "max": null,
            "min": 1
          },
          "default_value": 5,
          "description": "The number of closest neighbours to take into consideration. Typical values range from 2 to 10.",
          "label": "k",
          "type": "int"
        }
      ],
      "type": [
        "predictive_model"
      ]
    },
    {
      "code": "correlationHeatmap",
      "constraints": {
        "covariables": {
          "max_count": null,
          "min_count": "1"
        },
        "groupings": {
          "max_count": 0,
          "min_count": 0
        },
        "mixed": false,
        "variable": {
          "binominal": false,
          "integer": true,
          "polynominal": false,
          "real": true
        }
      },
      "description": "Correlation heatmap...",
      "docker_image": "hbpmip/python-correlation-heatmap:0.1.5",
      "environment": "python",
      "label": "Correlation heatmap",
      "type": [
        "statistics"
      ]
    },
    {
      "code": "hinmine",
      "constraints": {
        "covariables": {
          "max_count": null,
          "min_count": "1"
        },
        "groupings": {
          "max_count": 0,
          "min_count": 0
        },
        "mixed": false,
        "variable": {
          "binominal": true,
          "integer": true,
          "polynominal": true,
          "real": true
        }
      },
      "description": "The HinMine algorithm is an algorithm designed to construct network-analysis-based feature vectors for data instances that can be either nodes in a network or standard data instances with a fixed set of numeric features. In this implementation, the input for the algorithm is a set of data instances, and the output of the algorithm is a new data set with the same instances, but new features constructed out of them.",
      "docker_image": "hbpmip/python-jsi-hinmine:0.2.3",
      "environment": "Python",
      "label": "JSI HinMine",
      "parameters": [
        {
          "code": "damping",
          "constraints": {
            "max": 1.0,
            "min": 0.0
          },
          "default_value": 0.1,
          "description": "The variable *p* used in the construction of the P-PR vectors during propositionalization. The value of this variable can be any real number between *0* and *1*. Smaller values of the damping factor ensure faster calculation of the feature vectors, however larger values of *p* mean that the algorithm is capable of performing longer walks, exploring more of the structure of the data.",
          "label": "damping",
          "type": "number"
        },
        {
          "code": "normalize",
          "default_value": "False",
          "description": "This variable determines whether the feature values of the input data instances should be normalized or not. If True, then the values of each feature are normalized to be between 0 and 1. This allows the algorithm to fairly compare two features measured with incomparable units. The value of this variable should be False if the difference in the size of the features carries inherent meaning.",
          "label": "normalize",
          "type": "enumeration",
          "values": [
            "False",
            "True"
          ]
        }
      ],
      "type": [
        "features_extraction"
      ]
    },
    {
      "code": "hedwig",
      "constraints": {
        "covariables": {
          "max_count": null,
          "min_count": "1"
        },
        "groupings": {
          "max_count": 0,
          "min_count": 0
        },
        "mixed": false,
        "variable": {
          "binominal": true,
          "integer": true,
          "polynominal": true,
          "real": true
        }
      },
      "description": "The Hedwig algorithm for subgroup discovery is a data mining algorithm designed for exploratory data analysis of a data set",
      "docker_image": "hbpmip/python-jsi-hedwig:1.0.5",
      "environment": "Python",
      "label": "JSI Hedwig",
      "parameters": [
        {
          "code": "beam",
          "constraints": {
            "max": null,
            "min": 1
          },
          "default_value": 10,
          "description": "The size of the beam to be used in the search. Larger values of this variable cause the search of the algorithm to take longer and return more high quality rules.",
          "label": "bean",
          "type": "int"
        },
        {
          "code": "support",
          "constraints": {
            "max": 1.0,
            "min": 0.0
          },
          "default_value": "0.1",
          "description": "The minimum relative support of the rules, discovered by Hedwig. The value of this parameter must be between 0 and 1 as the parameter represents the ration of the covered examples in the entire data set.",
          "label": "support",
          "type": "number"
        }
      ],
      "type": [
        "features_extraction"
      ]
    },
    {
      "code": "gpr",
      "disable": true,
      "environment": "Java/GPJ",
      "label": "Gaussian Process Regression",
      "type": [
        "predictive_model"
      ]
    },
    {
      "code": "svm",
      "disable": true,
      "environment": "Java/RapidMiner",
      "label": "SVM",
      "type": [
        "predictive_model"
      ]
    },
    {
      "code": "ffneuralnet",
      "disable": true,
      "environment": "Java/RapidMiner",
      "label": "Feedforward Neural Network",
      "type": [
        "predictive_model"
      ]
    },
    {
      "code": "randomforest",
      "disable": true,
      "environment": "Java/RapidMiner",
      "label": "Random Forest",
      "type": [
        "predictive_model"
      ]
    },
    {
      "code": "tSNE",
      "constraints": {
        "covariables": {
          "max_count": null,
          "min_count": 1
        },
        "groupings": {
          "max_count": 0,
          "min_count": 0
        },
        "mixed": false,
        "variable": {
          "binominal": true,
          "integer": true,
          "polynominal": true,
          "real": true
        }
      },
      "description": "tSNE...",
      "disable": false,
      "docker_image": "hbpmip/python-tsne:0.4.1",
      "environment": "Python",
      "label": "tSNE",
      "maturity": "experimental",
      "parameters": [],
      "type": [
        "features_extraction"
      ]
    },
    {
      "code": "ggparci",
      "constraints": {
        "covariables": {
          "max_count": null,
          "min_count": 1
        },
        "groupings": {
          "max_count": 0,
          "min_count": 0
        },
        "mixed": true,
        "variable": {
          "binominal": true,
          "integer": true,
          "polynominal": true,
          "real": true
        }
      },
      "description": "Parallel coordinate plot with added confidence interval bands",
      "disable": false,
      "docker_image": "hbpmip/r-ggparci:0.2.0",
      "environment": "R",
      "label": "ggparci",
      "maturity": "experimental",
      "parameters": [],
      "type": [
        "dataset_exploration"
      ]
    }
  ],
  "metrics": {
    "binominal_classification": [
      {
        "code": "Confusion matrix",
        "label": "Confusion matrix",
        "tooltip": "To be completed",
        "type": "confusion_matrix"
      },
      {
        "code": "Accuracy",
        "label": "Mean square error",
        "tooltip": "To be completed",
        "type": "numeric"
      },
      {
        "code": "Precision",
        "label": "Root mean square error",
        "tooltip": "To be completed",
        "type": "numeric"
      },
      {
        "code": "Sensitivity",
        "label": "Mean absolute error",
        "tooltip": "To be completed",
        "type": "numeric"
      },
      {
        "code": "False positive rate",
        "label": "False positive rate",
        "tooltip": "To be completed",
        "type": "numeric"
      }
    ],
    "classification": [
      {
        "code": "Confusion matrix",
        "label": "Confusion matrix",
        "tooltip": "To be completed",
        "type": "confusion_matrix"
      },
      {
        "code": "Accuracy",
        "label": "Accuracy",
        "tooltip": "To be completed",
        "type": "numeric"
      },
      {
        "code": "Weighted Precision",
        "label": "Weighted Precision",
        "tooltip": "To be completed",
        "type": "numeric"
      },
      {
        "code": "Weighted Recall",
        "label": "Weighted Recall",
        "tooltip": "To be completed",
        "type": "numeric"
      },
      {
        "code": "Weighted F1-score",
        "label": "Weighted F1-score",
        "tooltip": "To be completed",
        "type": "numeric"
      },
      {
        "code": "Weighted false positive rate",
        "label": "Weighted false positive rate",
        "tooltip": "To be completed",
        "type": "numeric"
      }
    ],
    "regression": [
      {
        "code": "MSE",
        "label": "Mean square error",
        "tooltip": "To be completed",
        "type": "numeric"
      },
      {
        "code": "RMSE",
        "label": "Root mean square error",
        "tooltip": "To be completed",
        "type": "numeric"
      },
      {
        "code": "MAE",
        "label": "Mean absolute error",
        "tooltip": "To be completed",
        "type": "numeric"
      },
      {
        "code": "R-squared",
        "label": "Coefficient of determination (R\u00b2)",
        "tooltip": "To be completed",
        "type": "numeric"
      },
      {
        "code": "Explained variance",
        "label": "Explained variance",
        "tooltip": "To be completed",
        "type": "numeric"
      }
    ]
  },
  "validations": [
    {
      "code": "kFoldCrossValidation",
      "label": "Random k-fold Cross Validation",
      "parameters": [
        {
          "code": "fold",
          "constraints": {
            "max": 20,
            "min": 2
          },
          "default_value": 5,
          "description": "The number of cross-validation fold",
          "label": "Fold",
          "type": "int"
        }
      ]
    }
  ]
}
