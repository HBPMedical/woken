{
  "data": [
    {
      "algorithm": "python-sgd-naive-bayes",
      "algorithmSpec": {
        "code": "naiveBayes",
        "parameters": []
      },
      "data": {
        "action": [
          {
            "let": {
              "x": {
                "a.flatten": [
                  {
                    "new": [
                      {
                        "u.arr": [
                          {
                            "cast.double": [
                              {
                                "attr": "input",
                                "path": [
                                  {
                                    "string": "lefthippocampus"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ],
                    "type": {
                      "items": {
                        "items": "double",
                        "type": "array"
                      },
                      "type": "array"
                    }
                  }
                ]
              }
            }
          },
          {
            "let": {
              "gaussFeatures": {
                "else": [
                  0.0
                ],
                "if": {
                  ">": [
                    {
                      "a.len": [
                        {
                          "cell": "gaussModel"
                        }
                      ]
                    },
                    0.0
                  ]
                },
                "then": [
                  {
                    "a.len": [
                      {
                        "cell": "gaussModel",
                        "path": [
                          0.0,
                          {
                            "string": "stats"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          },
          {
            "let": {
              "gaussianLL": {
                "a.map": [
                  {
                    "cell": "gaussModel"
                  },
                  {
                    "do": [
                      {
                        "model.naive.gaussian": [
                          {
                            "a.subseq": [
                              "x",
                              0.0,
                              "gaussFeatures"
                            ]
                          },
                          {
                            "attr": "dist",
                            "path": [
                              {
                                "string": "stats"
                              }
                            ]
                          }
                        ]
                      }
                    ],
                    "params": [
                      {
                        "dist": {
                          "fields": [
                            {
                              "name": "stats",
                              "type": {
                                "items": {
                                  "fields": [
                                    {
                                      "name": "mean",
                                      "type": "double"
                                    },
                                    {
                                      "name": "variance",
                                      "type": "double"
                                    }
                                  ],
                                  "name": "M",
                                  "type": "record"
                                },
                                "type": "array"
                              }
                            }
                          ],
                          "name": "GaussianDistribution",
                          "type": "record"
                        }
                      }
                    ],
                    "ret": "double"
                  }
                ]
              }
            }
          },
          {
            "let": {
              "multinomialLL": {
                "a.map": [
                  {
                    "cell": "multinomialModel"
                  },
                  {
                    "do": [
                      {
                        "model.naive.multinomial": [
                          {
                            "a.subseq": [
                              "x",
                              "gaussFeatures",
                              {
                                "a.len": [
                                  "x"
                                ]
                              }
                            ]
                          },
                          {
                            "attr": "dist",
                            "path": [
                              {
                                "string": "logLikelihoods"
                              }
                            ]
                          }
                        ]
                      }
                    ],
                    "params": [
                      {
                        "dist": {
                          "fields": [
                            {
                              "name": "logLikelihoods",
                              "type": {
                                "items": "double",
                                "type": "array"
                              }
                            }
                          ],
                          "name": "MultinomialDistribution",
                          "type": "record"
                        }
                      }
                    ],
                    "ret": "double"
                  }
                ]
              }
            }
          },
          {
            "let": {
              "classLL": {
                "cell": "logPrior"
              }
            }
          },
          {
            "if": {
              ">": [
                {
                  "a.len": [
                    "gaussianLL"
                  ]
                },
                0.0
              ]
            },
            "then": [
              {
                "set": {
                  "classLL": {
                    "la.add": [
                      "classLL",
                      "gaussianLL"
                    ]
                  }
                }
              }
            ]
          },
          {
            "if": {
              ">": [
                {
                  "a.len": [
                    "multinomialLL"
                  ]
                },
                0.0
              ]
            },
            "then": [
              {
                "set": {
                  "classLL": {
                    "la.add": [
                      "classLL",
                      "multinomialLL"
                    ]
                  }
                }
              }
            ]
          },
          {
            "let": {
              "norm": {
                "a.logsumexp": [
                  "classLL"
                ]
              }
            }
          },
          {
            "let": {
              "probs": {
                "a.map": [
                  "classLL",
                  {
                    "do": [
                      {
                        "m.exp": [
                          {
                            "-": [
                              "x",
                              "norm"
                            ]
                          }
                        ]
                      }
                    ],
                    "params": [
                      {
                        "x": "double"
                      }
                    ],
                    "ret": "double"
                  }
                ]
              }
            }
          },
          {
            "cell": "classes",
            "path": [
              {
                "a.argmax": [
                  "probs"
                ]
              }
            ]
          }
        ],
        "cells": {
          "classes": {
            "init": [
              "AD",
              "CN",
              "Other"
            ],
            "rollback": false,
            "shared": false,
            "type": {
              "items": "string",
              "type": "array"
            }
          },
          "gaussModel": {
            "init": [
              {
                "stats": [
                  {
                    "mean": 2.82834,
                    "variance": 0.18417
                  }
                ]
              },
              {
                "stats": [
                  {
                    "mean": 3.12883,
                    "variance": 0.09512
                  }
                ]
              },
              {
                "stats": [
                  {
                    "mean": 2.87676,
                    "variance": 0.01695
                  }
                ]
              }
            ],
            "rollback": false,
            "shared": false,
            "type": {
              "items": "GaussianDistribution",
              "type": "array"
            }
          },
          "logPrior": {
            "init": [
              -1.83579,
              -1.75182,
              -0.40488
            ],
            "rollback": false,
            "shared": false,
            "type": {
              "items": "double",
              "type": "array"
            }
          },
          "multinomialModel": {
            "init": [],
            "rollback": false,
            "shared": false,
            "type": {
              "items": "MultinomialDistribution",
              "type": "array"
            }
          },
          "validations": {
            "init": [
              {
                "code": "kfold",
                "data": {
                  "average": {
                    "Accuracy": 0.75029,
                    "Confusion matrix": {
                      "labels": [
                        "AD",
                        "CN",
                        "Other"
                      ],
                      "values": [
                        [
                          73.0,
                          60.0,
                          141.0
                        ],
                        [
                          12.0,
                          131.0,
                          155.0
                        ],
                        [
                          21.0,
                          40.0,
                          1085.0
                        ]
                      ]
                    },
                    "Weighted F1-score": 0.72,
                    "Weighted false positive rate": 0.36105,
                    "Weighted precision": 0.73228,
                    "Weighted recall": 0.75029,
                    "type": "PolynomialClassificationScore"
                  },
                  "folds": {
                    "1": {
                      "Accuracy": 0.76019,
                      "Confusion matrix": {
                        "labels": [
                          "AD",
                          "CN",
                          "Other"
                        ],
                        "values": [
                          [
                            37.0,
                            24.0,
                            77.0
                          ],
                          [
                            1.0,
                            71.0,
                            86.0
                          ],
                          [
                            4.0,
                            14.0,
                            545.0
                          ]
                        ]
                      },
                      "Weighted F1-score": 0.72595,
                      "Weighted false positive rate": 0.37201,
                      "Weighted precision": 0.76586,
                      "Weighted recall": 0.76019,
                      "type": "PolynomialClassificationScore"
                    },
                    "2": {
                      "Accuracy": 0.7404,
                      "Confusion matrix": {
                        "labels": [
                          "AD",
                          "CN",
                          "Other"
                        ],
                        "values": [
                          [
                            36.0,
                            36.0,
                            64.0
                          ],
                          [
                            11.0,
                            60.0,
                            69.0
                          ],
                          [
                            17.0,
                            26.0,
                            540.0
                          ]
                        ]
                      },
                      "Weighted F1-score": 0.71524,
                      "Weighted false positive rate": 0.34724,
                      "Weighted precision": 0.71378,
                      "Weighted recall": 0.7404,
                      "type": "PolynomialClassificationScore"
                    }
                  },
                  "type": "KFoldCrossValidationScore"
                },
                "node": "local",
                "validationSpec": {
                  "code": "kfold",
                  "parameters": [
                    {
                      "code": "k",
                      "value": "2"
                    }
                  ]
                }
              }
            ],
            "type": {
              "items": "Record",
              "type": "array"
            }
          }
        },
        "fcns": {
          "C": {
            "do": [
              {
                "a.map": [
                  "categories",
                  {
                    "do": [
                      {
                        "else": [
                          0.0
                        ],
                        "if": {
                          "==": [
                            "cat",
                            "x"
                          ]
                        },
                        "then": [
                          1.0
                        ]
                      }
                    ],
                    "params": [
                      {
                        "cat": "string"
                      }
                    ],
                    "ret": "double"
                  }
                ]
              }
            ],
            "params": [
              {
                "x": "string"
              },
              {
                "categories": {
                  "items": "string",
                  "type": "array"
                }
              }
            ],
            "ret": {
              "items": "double",
              "type": "array"
            }
          },
          "arr": {
            "do": [
              {
                "new": [
                  "x"
                ],
                "type": {
                  "items": "double",
                  "type": "array"
                }
              }
            ],
            "params": [
              {
                "x": "double"
              }
            ],
            "ret": {
              "items": "double",
              "type": "array"
            }
          },
          "standardize": {
            "do": [
              {
                "/": [
                  {
                    "-": [
                      "x",
                      "mu"
                    ]
                  },
                  "sigma"
                ]
              }
            ],
            "params": [
              {
                "x": "double"
              },
              {
                "mu": "double"
              },
              {
                "sigma": "double"
              }
            ],
            "ret": "double"
          }
        },
        "input": {
          "fields": [
            {
              "name": "lefthippocampus",
              "type": "double"
            }
          ],
          "name": "Input",
          "type": "record"
        },
        "metadata": {
          "X": "{\"lefthippocampus\":{\"count\":1718.0,\"mean\":2.9127631548,\"std\":0.259451083,\"min\":1.3047,\"25%\":2.8672,\"50%\":2.8672,\"75%\":2.88555,\"max\":4.4519}}",
          "score": "0.7590221187",
          "y": "{\"count\":1718,\"unique\":3,\"top\":\"Other\",\"freq\":1146}"
        },
        "method": "map",
        "name": "naive_bayes",
        "output": "string"
      },
      "dataProvenance": [],
      "feedback": [],
      "jobId": "*",
      "node": "local",
      "timestamp": 0.0,
      "type": "application/pfa+json"
    }
  ],
  "dataProvenance": [
    {
      "code": "desd-synthdata"
    },
    {
      "code": "qqni-synthdata"
    }
  ],
  "feedback": [],
  "jobId": "*",
  "node": "local",
  "query": {
    "algorithms": [
      {
        "code": "naiveBayes",
        "parameters": []
      }
    ],
    "covariables": [
      {
        "code": "lefthippocampus"
      }
    ],
    "covariablesMustExist": true,
    "filters": {
      "condition": "AND",
      "rules": [
        {
          "field": "alzheimerbroadcategory",
          "id": "alzheimerbroadcategory",
          "input": "text",
          "operator": "is_not_null",
          "type": "string",
          "value": []
        },
        {
          "field": "lefthippocampus",
          "id": "lefthippocampus",
          "input": "text",
          "operator": "is_not_null",
          "type": "string",
          "value": []
        }
      ]
    },
    "grouping": [],
    "targetTable": "cde_features_mixed",
    "testingDatasets": [],
    "trainingDatasets": [],
    "user": {
      "code": "test1"
    },
    "validationDatasets": [],
    "validations": [
      {
        "code": "kfold",
        "parameters": [
          {
            "code": "k",
            "value": "2"
          }
        ]
      }
    ],
    "variables": [
      {
        "code": "alzheimerbroadcategory"
      }
    ]
  },
  "timestamp": 0.0,
  "type": "application/vnd.hbp.mip.experiment.pfa+json"
}
