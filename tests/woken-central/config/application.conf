
# Sample configuration for distributed execution of Woken,
# where this node is the central node

akka {
  loglevel = DEBUG
  stdout-loglevel = DEBUG

  log-config-on-start = on
  log-dead-letters = 10
  log-dead-letters-during-shutdown = off

  remote {
    log-sent-messages = off
    log-received-messages = off
    log-remote-lifecycle-events = off

    maximum-payload-bytes = 10000000 bytes

    netty.tcp {
      hostname = ${clustering.ip} # external (logical) hostname
      port = ${clustering.port}   # external (logical) port

      bind.hostname = 0.0.0.0         # internal (bind) hostname
      bind.port = ${clustering.port}  # internal (bind) port

      message-frame-size =  10000000b
      send-buffer-size =  10000000b
      receive-buffer-size =  10000000b
      maximum-frame-size = 10000000b
    }

    artery {
      enabled = off
      canonical.hostname = ${clustering.ip} # external (logical) hostname
      canonical.port = ${clustering.port}   # external (logical) port

      bind-hostname = 0.0.0.0         # internal (bind) hostname
      bind-port = ${clustering.port}  # internal (bind) port

      advanced.aeron-dir = "/dev/shm/woken"
    }
  }

  cluster {
    seed-nodes = [
      "akka.tcp://"${clustering.cluster.name}"@"${clustering.seed-ip}":"${clustering.seed-port}
    ]

    roles = ["woken"]

    role {
      woken.min-nr-of-members = 1
      # Not validation or scoring
    }

    client {
      initial-contacts = ["akka.tcp://"${clustering.cluster.name}"@"${clustering.seed-ip}":"${clustering.seed-port}"/system/receptionist"]
    }

  }
}

app {
  clusterSystemName = ${clustering.cluster.name}
  jobServiceName = "job-service"
  dockerBridgeNetwork = "tests_default"
  networkInterface = "0.0.0.0"
  webServicesPort = 8087
  webServicesHttps = off
  disableWorkers = on

  master.router {
    actors {
      mining.limit = 10
      experiment.limit = 10
    }
  }

  basicAuth {
    user = "admin"
    password = "WoKeN"
  }
}

jobs {
  node = "federation"
  owner = "admin@mip.chuv.ch"
  chronosServerUrl = "http://chronos:4400"
  # TODO: central node should not require to connect to a features database
  featuresDb = "features"
  featuresTable = "cde_features_c"
  resultDb = "woken"
  metaDb = "meta"
}

db {
  woken {
    jdbc_driver = "org.postgresql.Driver"
    jdbc_url    = "jdbc:postgresql://db:5432/woken"
    host = "db"
    port = 5432
    user = "postgres"
    password = "test"
  }

  features {
    jdbc_driver = "org.postgresql.Driver"
    jdbc_url    = "jdbc:postgresql://db:5432/features"
    host = "db"
    port = 5432
    user = "postgres"
    password = "test"
  }

  meta {
    jdbc_driver = "org.postgresql.Driver"
    jdbc_url    = "jdbc:postgresql://db:5432/meta"
    host = "db"
    port = 5432
    user = "postgres"
    password = "test"
  }

}

datasets {

  node1 {
    label = "Node1"
    description = "Node1"
    anonymisationLevel = "Depersonalised"
    location {
      url = "http://wokennode1:8087"
      basicAuth {
        user = "admin"
        password = "WoKeN"
      }
    }
  }

  node2 {
    label = "Node2"
    description = "Node2"
    anonymisationLevel = "Depersonalised"
    location {
      url = "http://wokennode2:8087"
      basicAuth {
        user = "admin"
        password = "WoKeN"
      }
    }
  }

  node1ws {
    label = "Node1Ws"
    description = "Node1Ws"
    anonymisationLevel = "Depersonalised"
    location {
      url = "ws://wokennode1:8087"
      basicAuth {
        user = "admin"
        password = "WoKeN"
      }
    }
  }

  node2ws {
    label = "Node2Ws"
    description = "Node2Ws"
    anonymisationLevel = "Depersonalised"
    location {
      url = "ws://wokennode2:8087"
      basicAuth {
        user = "admin"
        password = "WoKeN"
      }
    }
  }

}
